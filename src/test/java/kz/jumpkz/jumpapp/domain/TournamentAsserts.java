package kz.jumpkz.jumpapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TournamentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTournamentAllPropertiesEquals(Tournament expected, Tournament actual) {
        assertTournamentAutoGeneratedPropertiesEquals(expected, actual);
        assertTournamentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTournamentAllUpdatablePropertiesEquals(Tournament expected, Tournament actual) {
        assertTournamentUpdatableFieldsEquals(expected, actual);
        assertTournamentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTournamentAutoGeneratedPropertiesEquals(Tournament expected, Tournament actual) {
        assertThat(expected)
            .as("Verify Tournament auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTournamentUpdatableFieldsEquals(Tournament expected, Tournament actual) {
        assertThat(expected)
            .as("Verify Tournament relevant properties")
            .satisfies(e -> assertThat(e.getTournamentName()).as("check tournamentName").isEqualTo(actual.getTournamentName()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTournamentUpdatableRelationshipsEquals(Tournament expected, Tournament actual) {
        assertThat(expected)
            .as("Verify Tournament relationships")
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()));
    }
}
