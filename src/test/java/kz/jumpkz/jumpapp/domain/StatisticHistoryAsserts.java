package kz.jumpkz.jumpapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StatisticHistoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatisticHistoryAllPropertiesEquals(StatisticHistory expected, StatisticHistory actual) {
        assertStatisticHistoryAutoGeneratedPropertiesEquals(expected, actual);
        assertStatisticHistoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatisticHistoryAllUpdatablePropertiesEquals(StatisticHistory expected, StatisticHistory actual) {
        assertStatisticHistoryUpdatableFieldsEquals(expected, actual);
        assertStatisticHistoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatisticHistoryAutoGeneratedPropertiesEquals(StatisticHistory expected, StatisticHistory actual) {
        assertThat(expected)
            .as("Verify StatisticHistory auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatisticHistoryUpdatableFieldsEquals(StatisticHistory expected, StatisticHistory actual) {
        assertThat(expected)
            .as("Verify StatisticHistory relevant properties")
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getLanguage()).as("check language").isEqualTo(actual.getLanguage()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatisticHistoryUpdatableRelationshipsEquals(StatisticHistory expected, StatisticHistory actual) {
        assertThat(expected)
            .as("Verify StatisticHistory relationships")
            .satisfies(e -> assertThat(e.getStatistic()).as("check statistic").isEqualTo(actual.getStatistic()))
            .satisfies(e -> assertThat(e.getDepartment()).as("check department").isEqualTo(actual.getDepartment()))
            .satisfies(e -> assertThat(e.getEmployee()).as("check employee").isEqualTo(actual.getEmployee()));
    }
}
